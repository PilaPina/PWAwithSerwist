interface LoggableObject {
    [key: string]: string | number;
}
export declare const messages: {
    "invalid-value": ({ paramName, validValueDescription, value }: LoggableObject) => string;
    "not-an-array": ({ moduleName, className, funcName, paramName }: LoggableObject) => string;
    "incorrect-type": ({ expectedType, paramName, moduleName, className, funcName }: LoggableObject) => string;
    "incorrect-class": ({ expectedClassName, paramName, moduleName, className, funcName, isReturnValueProblem }: LoggableObject) => string;
    "missing-a-method": ({ expectedMethod, paramName, moduleName, className, funcName }: LoggableObject) => string;
    "add-to-cache-list-unexpected-type": ({ entry }: LoggableObject) => string;
    "add-to-cache-list-conflicting-entries": ({ firstEntry, secondEntry }: LoggableObject) => string;
    "plugin-error-request-will-fetch": ({ thrownErrorMessage }: LoggableObject) => string;
    "invalid-cache-name": ({ cacheNameId, value }: LoggableObject) => string;
    "unregister-route-but-not-found-with-method": ({ method }: LoggableObject) => string;
    "unregister-route-route-not-registered": () => string;
    "queue-replay-failed": ({ name }: LoggableObject) => string;
    "duplicate-queue-name": ({ name }: LoggableObject) => string;
    "expired-test-without-max-age": ({ methodName, paramName }: LoggableObject) => string;
    "unsupported-route-type": ({ moduleName, className, funcName, paramName }: LoggableObject) => string;
    "not-array-of-class": ({ value, expectedClass, moduleName, className, funcName, paramName }: LoggableObject) => string;
    "max-entries-or-age-required": ({ moduleName, className, funcName }: LoggableObject) => string;
    "statuses-or-headers-required": ({ moduleName, className, funcName }: LoggableObject) => string;
    "invalid-string": ({ moduleName, funcName, paramName }: LoggableObject) => string;
    "channel-name-required": () => string;
    "invalid-responses-are-same-args": () => string;
    "expire-custom-caches-only": () => string;
    "unit-must-be-bytes": ({ normalizedRangeHeader }: LoggableObject) => string;
    "single-range-only": ({ normalizedRangeHeader }: LoggableObject) => string;
    "invalid-range-values": ({ normalizedRangeHeader }: LoggableObject) => string;
    "no-range-header": () => string;
    "range-not-satisfiable": ({ size, start, end }: LoggableObject) => string;
    "attempt-to-cache-non-get-request": ({ url, method }: LoggableObject) => string;
    "cache-put-with-no-response": ({ url }: LoggableObject) => string;
    "no-response": ({ url, error }: LoggableObject) => string;
    "bad-precaching-response": ({ url, status }: LoggableObject) => string;
    "non-precached-url": ({ url }: LoggableObject) => string;
    "add-to-cache-list-conflicting-integrities": ({ url }: LoggableObject) => string;
    "missing-precache-entry": ({ cacheName, url }: LoggableObject) => string;
    "cross-origin-copy-response": ({ origin }: LoggableObject) => string;
    "opaque-streams-source": ({ type }: LoggableObject) => string;
};
export type MessageKey = keyof typeof messages;
export {};
//# sourceMappingURL=messages.d.ts.map