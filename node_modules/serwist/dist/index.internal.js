export { D as Deferred, S as SerwistError, f as assert, d as cacheMatchIgnoreParams, h as canConstructResponseFromBodyStream, b as cleanupOutdatedCaches, a as clientsClaim, e as executeQuotaErrorCallbacks, g as getFriendlyURL, l as logger, c as privateCacheNames, t as timeout, w as waitUntil } from './chunks/waitUntil.js';
export { r as resultingClientExists } from './chunks/resultingClientExists.js';

let supportStatus;
function canConstructReadableStream() {
    if (supportStatus === undefined) {
        try {
            new ReadableStream({
                start () {}
            });
            supportStatus = true;
        } catch (error) {
            supportStatus = false;
        }
    }
    return supportStatus;
}

function dontWaitFor(promise) {
    void promise.then(()=>{});
}

export { canConstructReadableStream, dontWaitFor };
