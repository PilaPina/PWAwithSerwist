import { Route } from "../Route.js";
import type { HTTPMethod } from "../constants.js";
import type { RouteHandler, RouteMatchCallback } from "../types.js";
/**
 * Parses a `RegExp`, string, or function with a caching strategy into a `Route`. This is for
 * when you want to create a `Route`, but you don't want to register it just yet: sometimes
 * you want to call `setCatchHandler` first, for example.
 *
 * @param capture If the capture param is a `Route`, all other arguments will be ignored.
 * @param handler A callback function that returns a `Promise` resulting in a `Response`.
 * This parameter is required if `capture` is not a `Route` object.
 * @param method The HTTP method to match the `Route` against. Defaults to `'GET'`.
 * @returns The generated `Route`.
 */
export declare const parseRoute: (capture: RegExp | string | RouteMatchCallback | Route, handler?: RouteHandler, method?: HTTPMethod) => Route;
//# sourceMappingURL=parseRoute.d.ts.map