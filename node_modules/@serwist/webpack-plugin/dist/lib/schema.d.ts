import { z } from "zod";
export declare const webpackPartial: z.ZodObject<{
    chunks: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    exclude: z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodType<RegExp, z.ZodTypeDef, RegExp>, z.ZodFunction<z.ZodTuple<[z.ZodAny], null>, z.ZodBoolean>]>, "many">>;
    excludeChunks: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    include: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodType<RegExp, z.ZodTypeDef, RegExp>, z.ZodFunction<z.ZodTuple<[z.ZodAny], null>, z.ZodBoolean>]>, "many">>;
}, "strict", z.ZodTypeAny, {
    exclude: (string | RegExp | ((args_0: any) => boolean))[];
    chunks?: string[] | undefined;
    excludeChunks?: string[] | undefined;
    include?: (string | RegExp | ((args_0: any) => boolean))[] | undefined;
}, {
    chunks?: string[] | undefined;
    exclude?: (string | RegExp | ((args_0: any) => boolean))[] | undefined;
    excludeChunks?: string[] | undefined;
    include?: (string | RegExp | ((args_0: any) => boolean))[] | undefined;
}>;
export declare const injectPartial: z.ZodObject<{
    compileSrc: z.ZodDefault<z.ZodBoolean>;
    swDest: z.ZodOptional<z.ZodString>;
    webpackCompilationPlugins: z.ZodOptional<z.ZodArray<z.ZodAny, "many">>;
}, "strict", z.ZodTypeAny, {
    compileSrc: boolean;
    swDest?: string | undefined;
    webpackCompilationPlugins?: any[] | undefined;
}, {
    compileSrc?: boolean | undefined;
    swDest?: string | undefined;
    webpackCompilationPlugins?: any[] | undefined;
}>;
export declare const injectManifestOptions: z.ZodObject<{
    chunks: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    exclude: z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodType<RegExp, z.ZodTypeDef, RegExp>, z.ZodFunction<z.ZodTuple<[z.ZodAny], null>, z.ZodBoolean>]>, "many">>;
    excludeChunks: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    include: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodType<RegExp, z.ZodTypeDef, RegExp>, z.ZodFunction<z.ZodTuple<[z.ZodAny], null>, z.ZodBoolean>]>, "many">>;
    additionalPrecacheEntries: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodObject<{
        integrity: z.ZodOptional<z.ZodString>;
        revision: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        url: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        url: string;
        integrity?: string | undefined;
        revision?: string | null | undefined;
    }, {
        url: string;
        integrity?: string | undefined;
        revision?: string | null | undefined;
    }>]>, "many">>;
    disablePrecacheManifest: z.ZodDefault<z.ZodBoolean>;
    dontCacheBustURLsMatching: z.ZodOptional<z.ZodType<RegExp, z.ZodTypeDef, RegExp>>;
    manifestTransforms: z.ZodOptional<z.ZodArray<z.ZodFunction<z.ZodTuple<[z.ZodArray<z.ZodObject<{
        integrity: z.ZodOptional<z.ZodString>;
        revision: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        url: z.ZodString;
        size: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        url: string;
        size: number;
        integrity?: string | undefined;
        revision?: string | null | undefined;
    }, {
        url: string;
        size: number;
        integrity?: string | undefined;
        revision?: string | null | undefined;
    }>, "many">, z.ZodOptional<z.ZodUnknown>], null>, z.ZodUnion<[z.ZodPromise<z.ZodObject<{
        manifest: z.ZodArray<z.ZodObject<{
            integrity: z.ZodOptional<z.ZodString>;
            revision: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            url: z.ZodString;
            size: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            url: string;
            size: number;
            integrity?: string | undefined;
            revision?: string | null | undefined;
        }, {
            url: string;
            size: number;
            integrity?: string | undefined;
            revision?: string | null | undefined;
        }>, "many">;
        warnings: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strict", z.ZodTypeAny, {
        manifest: {
            url: string;
            size: number;
            integrity?: string | undefined;
            revision?: string | null | undefined;
        }[];
        warnings?: string[] | undefined;
    }, {
        manifest: {
            url: string;
            size: number;
            integrity?: string | undefined;
            revision?: string | null | undefined;
        }[];
        warnings?: string[] | undefined;
    }>>, z.ZodObject<{
        manifest: z.ZodArray<z.ZodObject<{
            integrity: z.ZodOptional<z.ZodString>;
            revision: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            url: z.ZodString;
            size: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            url: string;
            size: number;
            integrity?: string | undefined;
            revision?: string | null | undefined;
        }, {
            url: string;
            size: number;
            integrity?: string | undefined;
            revision?: string | null | undefined;
        }>, "many">;
        warnings: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strict", z.ZodTypeAny, {
        manifest: {
            url: string;
            size: number;
            integrity?: string | undefined;
            revision?: string | null | undefined;
        }[];
        warnings?: string[] | undefined;
    }, {
        manifest: {
            url: string;
            size: number;
            integrity?: string | undefined;
            revision?: string | null | undefined;
        }[];
        warnings?: string[] | undefined;
    }>]>>, "many">>;
    maximumFileSizeToCacheInBytes: z.ZodDefault<z.ZodNumber>;
    modifyURLPrefix: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    injectionPoint: z.ZodDefault<z.ZodString>;
    swSrc: z.ZodString;
    compileSrc: z.ZodDefault<z.ZodBoolean>;
    swDest: z.ZodOptional<z.ZodString>;
    webpackCompilationPlugins: z.ZodOptional<z.ZodArray<z.ZodAny, "many">>;
}, "strict", z.ZodTypeAny, {
    exclude: (string | RegExp | ((args_0: any) => boolean))[];
    compileSrc: boolean;
    disablePrecacheManifest: boolean;
    maximumFileSizeToCacheInBytes: number;
    injectionPoint: string;
    swSrc: string;
    chunks?: string[] | undefined;
    excludeChunks?: string[] | undefined;
    include?: (string | RegExp | ((args_0: any) => boolean))[] | undefined;
    additionalPrecacheEntries?: (string | {
        url: string;
        integrity?: string | undefined;
        revision?: string | null | undefined;
    })[] | undefined;
    dontCacheBustURLsMatching?: RegExp | undefined;
    manifestTransforms?: ((args_0: {
        url: string;
        size: number;
        integrity?: string | undefined;
        revision?: string | null | undefined;
    }[], args_1: unknown) => {
        manifest: {
            url: string;
            size: number;
            integrity?: string | undefined;
            revision?: string | null | undefined;
        }[];
        warnings?: string[] | undefined;
    } | Promise<{
        manifest: {
            url: string;
            size: number;
            integrity?: string | undefined;
            revision?: string | null | undefined;
        }[];
        warnings?: string[] | undefined;
    }>)[] | undefined;
    modifyURLPrefix?: Record<string, string> | undefined;
    swDest?: string | undefined;
    webpackCompilationPlugins?: any[] | undefined;
}, {
    swSrc: string;
    chunks?: string[] | undefined;
    exclude?: (string | RegExp | ((args_0: any) => boolean))[] | undefined;
    excludeChunks?: string[] | undefined;
    include?: (string | RegExp | ((args_0: any) => boolean))[] | undefined;
    additionalPrecacheEntries?: (string | {
        url: string;
        integrity?: string | undefined;
        revision?: string | null | undefined;
    })[] | undefined;
    disablePrecacheManifest?: boolean | undefined;
    dontCacheBustURLsMatching?: RegExp | undefined;
    manifestTransforms?: ((args_0: {
        url: string;
        size: number;
        integrity?: string | undefined;
        revision?: string | null | undefined;
    }[], args_1: unknown) => {
        manifest: {
            url: string;
            size: number;
            integrity?: string | undefined;
            revision?: string | null | undefined;
        }[];
        warnings?: string[] | undefined;
    } | Promise<{
        manifest: {
            url: string;
            size: number;
            integrity?: string | undefined;
            revision?: string | null | undefined;
        }[];
        warnings?: string[] | undefined;
    }>)[] | undefined;
    maximumFileSizeToCacheInBytes?: number | undefined;
    modifyURLPrefix?: Record<string, string> | undefined;
    injectionPoint?: string | undefined;
    compileSrc?: boolean | undefined;
    swDest?: string | undefined;
    webpackCompilationPlugins?: any[] | undefined;
}>;
//# sourceMappingURL=schema.d.ts.map