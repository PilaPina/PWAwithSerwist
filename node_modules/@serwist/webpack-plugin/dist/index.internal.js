import { r as relativeToOutputPath } from './chunks/relative-to-output-path.js';
import 'upath';

class ChildCompilationPlugin {
    src;
    dest;
    plugins;
    webpack;
    constructor({ src, dest, plugins }){
        this.src = src;
        this.dest = dest;
        this.plugins = plugins;
        this.webpack = null;
    }
    propagateWebpackConfig(compiler) {
        this.webpack = compiler.webpack;
    }
    apply(compiler) {
        this.propagateWebpackConfig(compiler);
        compiler.hooks.make.tapPromise(this.constructor.name, (compilation)=>this.performChildCompilation(compilation, compiler).catch((error)=>{
                compilation.errors.push(error);
            }));
    }
    async performChildCompilation(compilation, parentCompiler) {
        const resolvedDest = relativeToOutputPath(compilation, this.dest);
        const outputOptions = {
            filename: resolvedDest
        };
        const childCompiler = compilation.createChildCompiler(this.constructor.name, outputOptions, []);
        childCompiler.context = parentCompiler.context;
        childCompiler.inputFileSystem = parentCompiler.inputFileSystem;
        childCompiler.outputFileSystem = parentCompiler.outputFileSystem;
        if (this.plugins !== undefined) {
            for (const plugin of this.plugins){
                plugin?.apply(childCompiler);
            }
        }
        new this.webpack.EntryPlugin(parentCompiler.context, this.src, this.constructor.name).apply(childCompiler);
        await new Promise((resolve, reject)=>{
            childCompiler.runAsChild((error, _entries, childCompilation)=>{
                if (error) {
                    reject(error);
                } else {
                    compilation.warnings = compilation.warnings.concat(childCompilation?.warnings ?? []);
                    compilation.errors = compilation.errors.concat(childCompilation?.errors ?? []);
                    resolve();
                }
            });
        });
    }
}

export { ChildCompilationPlugin, relativeToOutputPath };
