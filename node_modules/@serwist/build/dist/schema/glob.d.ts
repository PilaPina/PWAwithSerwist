import { z } from "zod";
export declare const globPartial: z.ZodObject<{
    globFollow: z.ZodDefault<z.ZodBoolean>;
    globIgnores: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    globPatterns: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    globStrict: z.ZodDefault<z.ZodBoolean>;
    templatedURLs: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>>;
}, "strict", z.ZodTypeAny, {
    globFollow: boolean;
    globIgnores: string[];
    globPatterns: string[];
    globStrict: boolean;
    templatedURLs?: Record<string, string | string[]> | undefined;
}, {
    globFollow?: boolean | undefined;
    globIgnores?: string[] | undefined;
    globPatterns?: string[] | undefined;
    globStrict?: boolean | undefined;
    templatedURLs?: Record<string, string | string[]> | undefined;
}>;
export declare const optionalGlobDirectoryPartial: z.ZodObject<{
    globDirectory: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    globDirectory?: string | undefined;
}, {
    globDirectory?: string | undefined;
}>;
export declare const requiredGlobDirectoryPartial: z.ZodObject<{
    globDirectory: z.ZodString;
}, "strict", z.ZodTypeAny, {
    globDirectory: string;
}, {
    globDirectory: string;
}>;
//# sourceMappingURL=glob.d.ts.map